%\VignetteIndexEntry{Intrudoction_to_caOmicsV}
%\VignetteDepends{caOmicsV}
%\VignetteKeyword{bioinformatics}
%\VignetteKeyword{genomics}
%\VignetteKeyword{caOmicsV}
%\VignettePackage{caOmicsV}
%\VignetteEngine{knitr::knitr}
\documentclass{article}

<<style-knitr, eval=TRUE, echo=FALSE, results="asis">>=
BiocStyle::latex()
@

\usepackage{graphicx}
\usepackage{hyperref}



\begin{document}

<<include=FALSE>>=
library(knitr)
opts_chunk$set(
concordance=TRUE
)
@


\title{Intrudoction to caOmicsV}
\author{Hongen Zhang, Ph.D.\\
Genetics Branch, Center for Cancer Research,\\
National Cancer Institute, NIH}
\date{March 10, 2015}
\maketitle

\tableofcontents


\section{Introduction}
Translational genomic research often generates large multidimensional data 
from high-throughput technologies. Effectively visualization and presentation 
of genomic data at multidimensional level will be great benefit for 
understanding and describing the relationship between genomic variation and 
cancers.  The caOmicsV package provides a set of graphic functions to present 
multidimensional genomic data with two different types of layout: matrix 
layout (bioMatrix) and circos-like layout on biological network (bioNetCircos).

The data that could be plotted with each layout is listed below: 

\begin{itemize}
\item
Clinical (phenotypes) data such as gender, tissue type, and diagnosis, plotted 
as colored rectangles
\item
Expression data such as RNASeq and miRNASeq, plotted as heatmap 
\item
Category data such as DNA methylation status, plotted as colored box outlines 
on bioMatrix layout and bars on bioNetCircos layout
\item
Binary data such as mutation status and DNA copy number variations, plotted as 
colored points
\item
Text labelling, for gene names, sample names, summary in text format
\end{itemize}

In addition, link lines can also be plotted on bioNetCircos layout to show the 
relationship between two samples\\

For bioNetCircos layout, igraph and bc3net packages must be installed first.\\

\section{An Quick Demo}

Following code will generate an bioMatrix layout image with the built-in demo 
data.

<<caOmicsVBioMatrixLayoutDemo,fig.cap="caOmicsV bioMatrix layout plot">>=
library(caOmicsV)
data(caOmicsV.biomatrix.eset)
plotBioMatrix(caOmicsV.biomatrix.eset, summaryType="text")
bioMatrixLegend(heatmapNames=c("RNASeq", "miRNASeq"),
    categoryNames=c("Methyl H", "Methyl L"),
    binaryNames=c("CN LOSS", "CN Gain"),
    heatmapMin=-3, heatmapMax=3, colorType="BlueWhiteRed")
@


Run the code below will get an image in bioNetCircos layout with the built-in 
demo data.

<<caOmicsVbionetCircosLayoutDemo,fig.cap="caOmicsV bioNetCircos layout plot">>=
data(caOmicsV.bionet.eset)
plotBioNetCircos(caOmicsV.bionet.eset)
dataNames <- c("Tissue Type", "RNASeq", "miRNASeq", "Methylation", "CNV")
bioNetLegend(dataNames, heatmapMin=-3, heatmapMax=3)
@

\section{Making eSet}

To use the default plot function shown as above, the first step is making an 
eset to hold all plot dataset in a list object. Two demo esets are included 
in the package installation and could be explored with:

<<caOmicsV_bionet_eset>>=
data(caOmicsV.biomatrix.eset)
names(caOmicsV.biomatrix.eset)
data(caOmicsV.bionet.eset)
names(caOmicsV.bionet.eset)
@ 

caOmicsV package has one function getESet() to make eset object as above. The 
input data to pass to the function are as below:

\begin{itemize}
\item
sampleNames: required, character vector with names of samples to plot
\item
geneNames: required, character vector with names of genes to plot
\item
sampleData: required, data frame with rows for samples and columns for 
features. The first column must be sample names same as the sampleNames above 
in same order
\item
heatmapData: list of data frames (maximum 2), continue numeric data such 
as gene expression data. 
\item
categoryData: list of data frames(maximum 2), categorical data such as 
methylation High, Low, NO. 
\item
binaryData: list of data frames(maximum 3), binary data such as 0/1. 
\item
summaryData: list of data frames (maximum 2), summarization for genes or for 
samples. 
\item
secondGeneNames: names of second set of genes for labelling on matrix layout 
plot such as miRNA names
\end{itemize}

All genomic data must be held with data frame in the format of rows for genes 
and columns for samples. The first column of each data frame must be gene 
names same as the geneNames as above in same order. The column names of each 
data frame must be sample names same as sampleNames as above in same order. 
caOmicsV package contains functions to sort data frame for given order and 
several supplement functions are also included in the package to help extract 
required data set from big datasets by supplying required gene names and 
sample names in a given order.\\

To make caOmicsV plot, the eset must contains at least one genomic data (one 
of heatmap data, category data, or binary data)


\section{Custom bioMatrix plots}

The default plot method, plotBiomatrix(), is a convenient and efficient way to 
make a bioMatirx plot. In some cases, users can follow procedures below 
to generate bioMatrix layout plot .\\

\subsection{Demo data}

<<bioMatrixDemoData>>=
library(caOmicsV)
data(caOmicsV.biomatrix.eset)
eset <- caOmicsV.biomatrix.eset
names(eset)
@

\subsection{Initialize bioMatrix Layout}

<<InitializeBioMatrix, eval=FALSE>>=
numOfGenes <- length(eset$geneNames);
numOfSamples <- length(eset$sampleNames); 
numOfPhenotypes <- nrow(eset$sampleInfo)-1;

numOfHeatmap <- length(eset$heatmapData);
numOfSummary <- length(eset$summaryData);
phenotypes   <- rownames(eset$sampleInfo)[-1];

sampleHeight <- 0.4;
sampleWidth <- 0.1; 
samplePadding <- 0.025;
geneNameWidth <- 1;
sampleNameHeight <- 2.5;
remarkWidth <- numOfHeatmap; 
rowPadding <- 0.1;

initializeBioMatrixPlot(numOfGenes, numOfSamples, numOfPhenotypes, 
    sampleHeight, sampleWidth, samplePadding, rowPadding, 
    geneNameWidth, remarkWidth, sampleNameHeight)
caOmicsVColors <- getCaOmicsVColors()

par(cex=0.75)
showBioMatrixPlotLayout(eset$geneNames,eset$sampleNames, phenotypes)
@


\subsection{Plot tissue types on phenotype area}

<<PlotBioMatrixPhenotype, eval=FALSE>>=
head(eset$sampleInfo)[,1:3]
rowIndex <- 2;

sampleGroup <- as.character(eset$sampleInfo[rowIndex,])
sampleTypes <- unique(sampleGroup)
sampleColors <- rep("blue", length(sampleGroup));
sampleColors[grep("Tumor", sampleGroup)] <- "red"

rowNumber <- 1
areaName <- "phenotype"
plotBioMatrixSampleData(rowNumber, areaName, sampleColors);

geneLabelX <- getBioMatrixGeneLabelWidth()
maxAreaX <- getBioMatrixDataAreaWidth()
legendH <- getBioMatrixLegendHeight()
plotAreaH <- getBioMatrixPlotAreaHeigth()
sampleH<- getBioMatrixSampleHeight()

sampleLegendX <- geneLabelX + maxAreaX
sampleLegendY <- plotAreaH + legendH - length(sampleTypes)*sampleH
colors <- c("blue", "red")
legend(sampleLegendX, sampleLegendY, legend=sampleTypes, 
    fill=colors,  bty="n", xjust=0)
@

\subsection{Heatmap}

<<PlotBioMatrixHeatmap, eval=FALSE>>=
heatmapData <- as.matrix(eset$heatmapData[[1]][,]);
plotBioMatrixHeatmap(heatmapData, maxValue=3, minValue=-3)

heatmapData <- as.matrix(eset$heatmapData[[2]][,])
plotBioMatrixHeatmap(heatmapData, topAdjust=sampleH/2,  
    maxValue=3, minValue=-3);

secondNames <- as.character(eset$secondGeneNames)
textColors <- rep(caOmicsVColors[3], length(secondNames));
plotBioMatrixRowNames(secondNames, "omicsData", textColors, 
    side="right", skipPlotColumns=0);
@

\subsection{Outline heatmap cells}.

<<PlotBioMatrixCategoryData, eval=FALSE>>=
categoryData <- eset$categoryData[[1]]
totalCategory <- length(unique(as.numeric(eset$categoryData[[1]])))

plotColors <- rev(getCaOmicsVColors())
plotBioMatrixCategoryData(categoryData, areaName="omicsData", 
    sampleColors=plotColors[1:totalCategory])
@

\subsection{Binary data}

<<PlotBioMatrixBinaryData, eval=FALSE>>=
binaryData <- eset$binaryData[[1]];
plotBioMatrixBinaryData(binaryData, sampleColor=caOmicsVColors[4]);

binaryData <- eset$binaryData[[2]];
plotBioMatrixBinaryData(binaryData, sampleColor=caOmicsVColors[3])
@

\subsection{Summary data}

<<PlotBioMatrixSummaryData, eval=FALSE>>=
summaryData  <- eset$summaryInfo[[1]][, 2];
summaryTitle <- colnames(eset$summaryInfo[[1]])[2];

remarkWidth <- getBioMatrixRemarkWidth();
sampleWidth <- getBioMatrixSampleWidth();
col2skip <- remarkWidth/2/sampleWidth + 2;

plotBioMatrixRowNames(summaryTitle, areaName="phenotype", 
    colors="black", side="right", skipPlotColumns=col2skip);

plotBioMatrixRowNames(summaryData, "omicsData", 
    colors=caOmicsVColors[3], side="right", 
    skipPlotColumns=col2skip)
@

\subsection{Legend}

<<AddBioMatrixLegend, eval=FALSE>>=
bioMatrixLegend(heatmapNames=c("RNASeq", "miRNASeq"), 
    categoryNames=c("Methyl H", "Methyl L"), 
    binaryNames=c("CN LOSS", "CN Gain"),   
    heatmapMin=-3, heatmapMax=3, 
    colorType="BlueWhiteRed")
@

<<biomatrixCustomComplete, fig.cap="caOmicsV bioMatrix layout", fig.lp="abc", echo=FALSE>>=
<<InitializeBioMatrix>>
<<PlotBioMatrixPhenotype>>
<<PlotBioMatrixHeatmap>>
<<PlotBioMatrixCategoryData>>
<<PlotBioMatrixBinaryData>>
<<PlotBioMatrixSummaryData>>
<<AddBioMatrixLegend>>
@

\section{Custom bioNetCircos plotting}

With default bioNetCircos layout plot method, the node layout and labelling 
rely on the igraph package and sometimes the node layout and labelling may not 
be in desired location. In that case, it is recommended to manually check out 
the layout first then plot each item. 

Following are basic procedures to make a bioNetCircos plot.

\subsection{Demo data}

<<BioNetCircosDemoData>>=
library(caOmicsV)

data(caOmicsV.bionet.eset)
eset <- caOmicsV.bionet.eset

sampleNames  <- eset$sampleNames
geneNames    <- eset$geneNames
numOfSamples <- length(sampleNames)

numOfSampleInfo <- nrow(eset$sampleInfo) - 1
numOfSummary <- ifelse(eset$summaryByRow, 0, col(eset$summaryInfo)-1)
numOfHeatmap <- length(eset$heatmapData)
numOfCategory <- length(eset$categoryData)
numOfBinary <- length(eset$binaryData)

expr <- eset$heatmapData[[1]]
bioNet <- bc3net(expr) 
@

\subsection{Initialize bioNetCircos layout}

<<InitializeBioNetCircos, eval=FALSE>>=
widthOfSample    <- 100
widthBetweenNode <- 3
lengthOfRadius   <- 10

dataNum <- sum(numOfSampleInfo, numOfSummary, numOfHeatmap, 
    numOfCategory, numOfBinary)
trackheight <- 1.5
widthOfPlotArea  <- dataNum*2*trackheight

initializeBioNetCircos(bioNet, numOfSamples, widthOfSample, 
    lengthOfRadius, widthBetweenNode, widthOfPlotArea)
caOmicsVColors <- getCaOmicsVColors()
supportedType <- getCaOmicsVPlotTypes()

par(cex=0.75)
showBioNetNodesLayout()
@

\subsection{Manually label nodes}

At this point, each node has its index labelled. Manually check out the 
desired location for node name (gene) labelling then label each node.

<<BioNetCircosNodeLayout, eval=FALSE>>=
par(cex=0.6)
onTop <- c(14, 15, 16, 9, 7, 20, 8, 24, 10, 25)
labelBioNetNodeNames(nodeList=onTop,labelColor="blue", 
    labelLocation="top", labelOffset = 0.7)

onBottom <- c(26, 22, 23, 18, 19, 3, 5)
labelBioNetNodeNames(nodeList=onBottom,labelColor="black", 
    labelLocation="bottom", labelOffset = 0.7)

onLeft <- c(2, 11, 21, 17)
labelBioNetNodeNames(nodeList=onLeft,labelColor="red", 
    labelLocation="left", labelOffset = 0.7)

onRight <- c(13, 12, 4, 1, 6)
labelBioNetNodeNames(nodeList=onRight,labelColor="brown", 
    labelLocation="right", labelOffset = 0.7)
@

Once all node names are labelled correctly, plot area of each node could be 
erased for plotting.

<<EraseBioNetCircosNodes, eval=FALSE>>=
eraseBioNetNode()
@

\subsection{Plot data}

<<BioNetCircosBoundary, eval=FALSE>>=
inner <- lengthOfRadius/2
outer <- inner +  trackheight
@

Plot tissue type for each node. Repeat this step if there are more than one 
clinical features.

<<PlotBioNetCircosPhenotype, eval=FALSE>>=
groupInfo <- as.character(eset$sampleInfo[2, ])
sampleColors <- rep("blue", numOfSamples);
sampleColors[grep("Tumor", groupInfo)] <- "red"

plotType=supportedType[1]
groupInfo <- matrix(groupInfo, nrow=1)
bioNetCircosPlot(dataValues=groupInfo, 
    plotType, outer, inner, sampleColors)

inner <- outer + 0.5
outer <- inner +  trackheight  
@

Heatmap plot for each node. Repeat this step if there are more heatmap data. 

<<PlotBioNetCircosHeatmap, eval=FALSE>>=
exprData <- eset$heatmapData[[1]]
plotType <- supportedType[4] 
bioNetCircosPlot(exprData, plotType, outer, inner, 
    plotColors="BlueWhiteRed", maxValue=3, minValue=-3)

inner <- outer + 0.5 
outer <- inner +  trackheight
@

Category data plot for each node. Repeat this step if there are more category 
datasets.

<<PlotBioNetCircosCategoryData, eval=FALSE>>=
categoryData <- eset$categoryData[[1]]
plotType <- supportedType[2];
bioNetCircosPlot(categoryData, plotType, 
    outer, inner, plotColors="red")
inner <- outer + 0.5
outer <- inner +  trackheight
@ 

Binary data plot for each node. Repeat this step if there are more binary 
datasets

<<PlotBioNetCircosBinaryData, eval=FALSE>>=
binaryData <- eset$binaryData[[1]]
plotType <- supportedType[3]
plotColors <- rep(caOmicsVColors[1], ncol(binaryData))
bioNetCircosPlot(binaryData, plotType, 
    outer, inner, plotColors)

inner <- outer + 0.5
outer <- inner +  trackheight 
@

Link samples on a node. Repeat this step for each node when needed.

<<LinkBioNetCircosSamples, eval=FALSE>>=
outer <- 2.5
bioNetGraph <- getBioNetGraph()
nodeIndex <- which(V(bioNetGraph)$name=="PLVAP")

fromSample <- 10 
toSample <- 50 
plotColors <- "red"
linkBioNetSamples(nodeIndex, fromSample, 
    toSample, outer, plotColors)

fromSample <- 40 
toSample <- 20 
plotColors <- "blue"
linkBioNetSamples(nodeIndex, fromSample, 
    toSample, outer, plotColors)
@

\subsection{Add legend}

<<AddBioNetCircosLegend, eval=FALSE>>=
dataNames <- c("Tissue Type", "RNASeq", "Methylation", "CNV")
bioNetLegend(dataNames, heatmapMin=-3, heatmapMax=3)
@

<<finalBioNetCircos, fig.cap="Manual or custom BioNetCircos plot", echo=FALSE>>=
<<InitializeBioNetCircos>>
<<BioNetCircosNodeLayout>>
<<EraseBioNetCircosNodes>>
<<BioNetCircosBoundary>>
<<PlotBioNetCircosPhenotype>>
<<PlotBioNetCircosHeatmap>>
<<PlotBioNetCircosCategoryData>>
<<PlotBioNetCircosBinaryData>>
<<LinkBioNetCircosSamples>>
<<AddBioNetCircosLegend>>
@



\section{sessionInfo}
<<sessionInfo>>=
sessionInfo()
@ 
\end{document}

